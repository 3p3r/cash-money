diff --git a/node_modules/cash/dist/index.js b/node_modules/cash/dist/index.js
index d73d537..d5f59cc 100755
--- a/node_modules/cash/dist/index.js
+++ b/node_modules/cash/dist/index.js
@@ -1,6 +1,7 @@
 'use strict';
 
 var os = require('os');
+var assert = require('assert');
 var Vorpal = require('vorpal');
 
 var commands = require('./../commands.json');
@@ -11,6 +12,9 @@ var path = require('path');
 var fs = require('fs');
 
 var cmds = undefined;
+var loaded = false;
+var helps = new Map();
+var providers = new Map();
 
 var app = {
 
@@ -24,10 +28,11 @@ var app = {
 
   _fatal: false,
 
-  export: function _export(str, cbk) {
+  export: async function _export(str, cbk) {
+    app.load();
     // Is this a tagged template literal?
     var tmpl = Array.isArray(str) && Array.isArray(str.raw);
-    cbk = tmpl && cbk || function () {};
+    cbk = tmpl && cbk || function () { };
     var options = {
       fatal: app._fatal || false
     };
@@ -54,13 +59,18 @@ var app = {
     } else {
       commands = [str];
     }
-    commands.forEach(function (command) {
-      app.vorpal.execSync(command, options);
-    });
+    for (let command of commands) {
+      await app.vorpal.execSync(command, options);
+    }
     unhook();
     return String(out).replace(/\n$/, '');
   },
   load: function load() {
+    if (loaded) return;
+    loaded = true;
+    process.chdir('/');
+    this.importedCommands = [];
+    fs.mkdirSync(os.tmpdir(), { recursive: true });
     var self = this;
     self.vorpal.api = {};
     this.commands.forEach(function (cmd) {
@@ -69,10 +79,10 @@ var app = {
       }
       try {
         (function () {
-          var mod = require('./commands/' + cmd + '.js');
+          var mod = providers.has(cmd) ? providers.get(cmd) : require('./commands/' + cmd + '.js');
           var help = undefined;
           try {
-            help = require('./help/' + cmd + '.js');
+            help = helps.has(cmd) ? helps.get(cmd) : require('./help/' + cmd + '.js');
             help = String(help).replace(/^\n|\n$/g, '');
           } catch (e) {
             // .. whatever
@@ -114,7 +124,7 @@ var app = {
     var _loop = function _loop(cmd) {
       if (app.vorpal.api.hasOwnProperty(cmd)) {
         app.export[cmd] = function (args, options, callback) {
-          callback = callback || function () {};
+          callback = callback || function () { };
           options = options || {};
           options.vorpal = app.vorpal;
           return interfacer.call(this, {
@@ -222,6 +232,51 @@ cmds = {
   }
 };
 
-app.load();
+const preparser = require('cash/dist/preparser');
+
+const _makeProvider = ({ exec, setup, command }) => (function (vorpal) {
+  class Command {
+    static async exec(args, options, callback) {
+      try {
+        const ret = await exec(options);
+        callback(ret);
+      } catch (err) {
+        this.log(`command failed: "${err.message}" with args: "${JSON.stringify(args)}"`);
+        callback(1);
+      }
+    }
+  }
+  if (vorpal === undefined) {
+    return Command;
+  }
+  vorpal.api[command] = Command;
+  setup({
+    vorpal,
+    preparser,
+    interfacer: function (args, callback) {
+      return interfacer.call(this, {
+        options: args.options,
+        command: Command,
+        args, callback,
+        async: true,
+      });
+    },
+  });
+});
+
+const _use = function ({ command, provider, help }) {
+  assert.ok(!loaded);
+  app.commands.push(command);
+  providers.set(command, provider);
+  helps.set(command, help);
+};
+
+app.export.use = function use({ name, help, exec, setup }) {
+  _use({
+    help,
+    command: name,
+    provider: _makeProvider({ exec, setup, command: name }),
+  });
+};
 
 module.exports = app.export;
